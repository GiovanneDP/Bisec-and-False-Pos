def bisseccao(f, a, b, tol=1e-6, max_iter=100):
    if f(a) * f(b) >= 0:  # Verifica se o intervalo contém uma raiz
        raise ValueError("O intervalo não contém uma raiz ou há múltiplas raízes.")
    
    for _ in range(max_iter):  # Repetir até atingir o número máximo de iterações
        c = (a + b) / 2  # Calcula o ponto médio do intervalo
        if abs(f(c)) < tol or (b - a) / 2 < tol:  # Verifica se a raiz foi encontrada
            return c
        if f(a) * f(c) < 0:  # Verifica em qual metade está a raiz
            b = c
        else:
            a = c
    return (a + b) / 2  # Retorna a melhor aproximação da raiz


def falsa_posicao(f, a, b, tol=1e-6, max_iter=100):
    
    if f(a) * f(b) >= 0:  # Verifica se o intervalo contém uma raiz
        raise ValueError("O intervalo não contém uma raiz ou há múltiplas raízes.")
    
    for _ in range(max_iter):  # Repetir até atingir o número máximo de iterações
        c = (a * f(b) - b * f(a)) / (f(b) - f(a))  # Cálculo usando interpolação linear
        if abs(f(c)) < tol:  # Verifica se a raiz foi encontrada
            return c
        if f(a) * f(c) < 0:  # Verifica em qual metade está a raiz
            b = c
        else:
            a = c
    return c  # Retorna a melhor aproximação da raiz

# Entrada do usuário
a = float(input("Digite o valor de a: "))  # Pede ao usuário o valor inicial do intervalo
b = float(input("Digite o valor de b: "))  # Pede ao usuário o valor final do intervalo

try:
    raiz_bisseccao = bisseccao(func, a, b)  # Chama o método da Bissecção
    print("Raiz pelo método da Bissecção:", raiz_bisseccao)
except ValueError as e:
    print("Erro no método da Bissecção:", e)  # Mensagem de erro caso o intervalo seja inválido

try:
    raiz_falsa_posicao = falsa_posicao(func, a, b)  # Chama o método da Falsa Posição
    print("Raiz pelo método da Falsa Posição:", raiz_falsa_posicao)
except ValueError as e:
    print("Erro no método da Falsa Posição:", e)  # Mensagem de erro caso o intervalo seja inválido
